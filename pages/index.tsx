import * as React from "react";
import Color from "color";
import Head from "next/head";
import _isEqual from "lodash/isEqual";
import { motion, useMotionValue, MotionValue } from "framer-motion";
import { produce } from "immer";
import { useWindowSize, useRaf } from "react-use";

import styles from "../styles/home.module.css";
import { getRandomColor, toPercentage, toPx } from "../lib/helpers";
import { HTMLMotionProps } from "framer-motion/types/render/html/types";

interface Transform {
  x: number;
  y: number;
  w: number;
  h: number;
}

export interface RoomData {
  color: string;
  duration: number;
  transform: Transform;
}

interface RoomTextProps {
  color: MotionValue<string>;
  children: React.ReactNode;
}

interface HomeProps {
  rooms: RoomData[];
}

function genRoomData() {
  return {
    color: getRandomColor(),
    duration: Math.random() * 2 + 1,
    transform: {
      x: Math.random(),
      y: Math.random(),
      w: Math.random() / 6 + 0.1,
      h: Math.random() / 6 + 0.1,
    },
  };
}

function RoomText({ children, color }: RoomTextProps) {
  useRaf(250);
  const c = new Color(color.get());
  const text = c.l() > 50 ? "#000000" : "#ffffff";

  return <div style={{ color: text }}>{children}</div>;
}

function Room({ children, ...rest }: HTMLMotionProps<"div">) {
  const [initData] = React.useState(() => genRoomData());
  const { width, height } = useWindowSize();
  const colorValue = useMotionValue("#ffffff");

  const { transform } = initData;

  return (
    <motion.div
      className={styles.box}
      style={{
        backgroundColor: colorValue,
        x: toPx(transform.x * width),
        y: toPx(transform.y * height),
        width: toPercentage(Math.min(transform.w, 1 - transform.x)),
        height: toPercentage(Math.min(transform.h, 1 - transform.y)),
      }}
      {...rest}
    >
      <RoomText color={colorValue}>{children}</RoomText>
    </motion.div>
  );
}

export function getStaticProps() {
  const rooms = [];
  for (let i = 0; i < 10; i++) {
    rooms.push(genRoomData());
  }
  return { props: { rooms } };
}

export default function Home({ rooms: initRooms }: HomeProps) {
  const [rooms, setRooms] = React.useState(() => initRooms);
  const { width, height } = useWindowSize();

  function click({ clientX: x, clientY: y }: React.MouseEvent) {
    setRooms(
      produce(rooms, (draft) => {
        for (const room of draft) {
          const { transform } = room;
          transform.x = x / width;
          transform.y = y / height;
        }
      }),
    );
  }

  function animationComplete(idx: number) {
    setRooms(
      produce(rooms, (draft) => {
        draft[idx] = genRoomData();
      }),
    );
  }

  return (
    <div className={styles.container} onClick={click}>
      <Head>
        <title>This Liver</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {typeof window !== "undefined" &&
        rooms.map((room, i) => {
          const { transform: t } = room;
          return (
            <Room
              key={i}
              transition={{ duration: room.duration }}
              onAnimationComplete={() => animationComplete(i)}
              animate={{
                x: toPx(t.x * width),
                y: toPx(t.y * height),
                width: toPercentage(Math.min(t.w, 1 - t.x)),
                height: toPercentage(Math.min(t.h, 1 - t.y)),
                backgroundColor: room.color,
              }}
            >
              LIVER
            </Room>
          );
        })}

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Liver</a>
        </h1>

        <p className={styles.description}>
          Get started by editing <code className={styles.code}>Liver</code>
        </p>
      </main>
    </div>
  );
}
